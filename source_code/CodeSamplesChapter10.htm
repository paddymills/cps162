<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Figure 12</title>
</head>

<body bgcolor="#FFFFCC">

<p align="center"><font face="Arial">Nyhoff, ADTs, Data Structures and Problem
Solving with C++, Second Edition,&nbsp;<br>
© 2005 Pearson Education, Inc. All rights reserved. 0-13-140909-3&nbsp;</font> </p>
<p align="center">&nbsp; </p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="86%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Binary Search Function</font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF"><b>void recBinarySearch (ArrayType a, int first, int last,
		ElementType item,
		bool &amp; found, int &amp; loc)
/*-------------------------------------------------------
	Recursively search sub(list) a[first] , ... a[last]
	for item using a binary search.

	Precondition: Elements of a are in ascending order;
	    item has the same type as the array elements
	Postcondition: found = true and loc = position of item
	    if search is successful; otherwise, found is false.
-----------------------------------------------------------*/
{
    if (first &gt; last)     	 // anchor 1 -- empty sublist
	found = false;
    else                         // inductive case
    {                            // recursively search
	loc = (first + last) / 2;
	if (item &lt; a[loc])       // the first half
	    recBinarySearch( a, first, loc-1, found loc);
	else if (item &gt; a[loc])	 // the seonc half
	    recBinarySearch (a, loc + 1, last, found, loc);
	else
	    found = true;	 // anchor 2 -- found item
    }
}&nbsp;</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Figure 10.4">Figure
        10.4</a> Solve Towers of Hanoi Problem Recursively</font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF"><b>/*---------------------------------------------------------------------
   Program to solve the Towers of Hanoi puzzle recursively.

   Input:  numDisks, the number of disks to be moved
   Output: A sequence of moves that solve the puzzle
 --------------------------------------------------------------------*/

#include &lt;iostream&gt;
using namespace std;

void move(unsigned n, unsigned &amp; moveNumber,
          char source, char destination, char spare);

int main()
{
   const char PEG1 = 'A',           // the three pegs
              PEG2 = 'B',
              PEG3 = 'C';
   unsigned moveNumber = 0;         // move counter

   cout &lt;&lt; &quot;This program solves the Hanoi Towers puzzle.\n\n&quot;;
   cout &lt;&lt; &quot;Enter the number of disks: &quot;;
   int numDisks;                     // the number of disks to be moved
   cin &gt;&gt; numDisks;
   cout &lt;&lt; endl;

   move(numDisks, moveNumber, PEG1, PEG3, PEG2); // the solution

   return 0;
}

#include &lt;iomanip&gt;

void move(unsigned n, unsigned &amp; moveNumber,
          char source, char destination, char spare)
/*--------------------------------------------------------------------
  Recursive function to solve the Towers of Hanoi puzzle with n disks.

  Precondition:  None.
  Postcondition: A message describing the move is output to cout.
 ---------------------------------------------------------------------*/
{
  if (n == 1)                      // anchor
  {
    moveNumber++;
    cout &lt;&lt; setw(3) &lt;&lt; moveNumber 
	 &lt;&lt;  &quot;. Move the top disk from &quot; &lt;&lt; source  
         &lt;&lt; &quot; to &quot; &lt;&lt; destination &lt;&lt; endl;
  }
  else
  {                                // inductive case
    move(n-1, moveNumber, source, spare, destination);
    move(1, moveNumber, source, destination, spare);
    move(n-1, moveNumber, spare, destination, source);
  }
}&nbsp;</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Figure 10.7">Figure
        10.7</a> STL's </font><font face="Courier New" color="#0000FF"><b>sort</b></font><font color="#FF0000">
        Algorithm - Version 1</font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF"><b>/*-------------------------------------------------------------------------- 
   Program to illustrate use of C++'s standard sort algorithm.

   Output:  A sorted vector of ints and a sorted deque of doubles.
--------------------------------------------------------------------------*/

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;deque&gt;
#include &lt;algorithm&gt;
using namespace std;

template &lt;typename Container&gt;
void display(const Container &amp; c);

int main()
{
  int ints[] = {555, 33, 444, 22, 222, 777, 1, 66};
  vector&lt;int&gt; v(ints, ints + 5);      // Use only first 5 elements of ints
  sort(v.begin(), v.end());
  cout &lt;&lt; &quot;Sorted vector of integers:\n&quot;;
  display(v);

  double dubs[] = {55.5, 3.3, 44.4, 2.2, 22.2, 77.7, 0.1};
  deque&lt;double&gt; d(dubs, dubs + 7);    // Use all 7 elements of ints
  sort(d.begin(), d.end());
  cout &lt;&lt; &quot;\nSorted deque of doubles:\n&quot;;
  display(d);

  return 0;
}

template &lt;typename Container&gt;
void display(const Container &amp; c)
/*-------------------------------------------------------------------------
  Function template to display elements of any type (for which the output
  operator is defined) stored in a container c (for which [] and size() 
  are defined).

  Precondition:  Container is a type parameter.  
  Postcondition: Values stored in c are output to cout. 
 -------------------------------------------------------------------------*/
{
  for (int i = 0; i &lt; c.size(); i++)
    cout &lt;&lt; c[i] &lt;&lt; &quot;  &quot;;
  cout &lt;&lt; endl;
}&nbsp;</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Figure 10.8">Figure
        10.8</a> Sorting a </font><font face="Courier New" color="#0000FF"><b>vector</b></font><font color="#FF0000">
        of </font><font face="Courier New" color="#0000FF"><b>stack</b></font><font color="#FF0000">s </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF"><b>/*------------------------------------------------------------------------- 
   Use the standard sort algorithm to sort a vector of stack&lt;int&gt;s.
-------------------------------------------------------------------------*/
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;stack&gt;
#include &lt;algorithm&gt;
using namespace std;

// Less-than function for stack
template &lt;typename ElementType&gt;
bool operator&lt;(const stack&lt;ElementType&gt; &amp; s1,
               const stack&lt;ElementType&gt; &amp; s2)
{ 
   return s1.top() &lt; s2.top(); 
}

// Output a stack
template &lt;typename ElementType&gt;
void dump(stack&lt;ElementType&gt; s);

int main()
{
   vector&lt; stack&lt;int&gt; &gt; s(4);
   s[0].push(90); s[0].push(80);
   s[1].push(10);
   s[2].push(11); s[2].push(22);
   s[3].push(12); s[3].push(56); s[3].push(34);
   cout &lt;&lt; &quot;Stacks in original order:\n&quot;;
   for (int i = 0; i &lt; 4; i++)
   {
      cout &lt;&lt; &quot;Stack #&quot; &lt;&lt; i &lt;&lt; &quot;: &quot;;
      dump(s[i]);
      cout &lt;&lt; endl;
   }
 
   sort(s.begin(), s.end());
   cout &lt;&lt; &quot;\nStacks in sorted order:\n&quot;; 
   for (int i = 0; i &lt; 4; i++)
   {
     cout &lt;&lt; &quot;Stack #&quot; &lt;&lt; i &lt;&lt; &quot;: &quot;;
     dump(s[i]);
     cout &lt;&lt; endl;
   }
   return 0;
}

/*--------------------------------------------------------------------------
  Display stack elements from top to bottom.
  Precondition:  ElementType is a type parameter.
  Postcondition: Elements of s are output to cout from top to bottom.
 -------------------------------------------------------------------------*/
template &lt;typename ElementType&gt;
void dump(stack&lt;ElementType&gt; s)
{
  cout &lt;&lt; &quot; Top--&gt;&quot;;
  while (!s.empty())
  {
    cout &lt;&lt; s.top() &lt;&lt; &quot;  &quot;;
    s.pop();
  }
}&nbsp;</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000"><a name="Figure 10.9">Figure
        10.9</a> STL's </font><font face="Courier New" color="#0000FF"><b>sort</b></font><font color="#FF0000">
        Algorithm - Version 2 </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre><font color="#0000FF"><b>/*------------------------------------------------------------------------- 
   Program to illustrate use of the standard sort algorithm.

   Output:  A sorted vector of ints and a sorted deque of doubles.
-------------------------------------------------------------------------*/

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;deque&gt;
#include &lt;algorithm&gt;
using namespace std;

template &lt;typename Container&gt;
void display(const Container &amp; c);

// Less-than functions
bool intLessThan(int a, int b)
{ return a &gt; b; }
bool dubLessThan(double a, double b)
{ return a &gt; b; }

int main()
{
  int ints[] = {555, 33, 444, 22, 222, 777, 1, 66};
  vector&lt;int&gt; v(ints, ints + 5);      // Use only first 5 elements of ints
  sort(v.begin(), v.end(), intLessThan);
  cout &lt;&lt; &quot;Sorted vector of integers:\n&quot;;
  display(v);

  double dubs[] = {55.5, 3.3, 44.4, 2.2, 22.2, 77.7, 0.1};
  deque&lt;double&gt; d(dubs, dubs + 7);    // Use all 7 elements of ints
  sort(d.begin(), d.end(), dubLessThan);
  cout &lt;&lt; &quot;\nSorted deque of doubles:\n&quot;;
  display(d);

  return 0;
}

template &lt;typename Container&gt;
void display(const Container &amp; c)
/*-------------------------------------------------------------------------
  Function template to display elements of any type (for which the output
  operator is defined) stored in a container c (for which [] and size() 
  are defined).

  Precondition:  Container is a type parameter.  
  Postcondition: Values stored in c are output to cout. 
 -------------------------------------------------------------------------*/
{
  for (int i = 0; i &lt; c.size(); i++)
    cout &lt;&lt; c[i] &lt;&lt; &quot;  &quot;;
  cout &lt;&lt; endl;
}&nbsp;</b></font></pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp; </p>
<div align="center">
  <center>
  <table border="1" width="79%">
    <tr>
      <td width="100%">
        <h2 align="center"><font color="#FF0000">Figure </font></h2>
      </td>
    </tr>
    <tr>
      <td width="100%">
        <pre>&nbsp;</pre>
      </td>
    </tr>
  </table>
  </center>
</div>

<p>&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>
